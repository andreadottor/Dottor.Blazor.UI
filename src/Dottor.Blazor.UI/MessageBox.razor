@implements IAsyncDisposable

@inject IMessageBoxService MessageBoxService
@inject IJSRuntime JS

<div @ref="_modalElement" class="modal fade" data-bs-backdrop="true" tabindex="-1" aria-labelledby="messageBoxTitle" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="messageBoxTitle">@Title</h5>
            </div>
            <div class="modal-body">
                @Text
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary"
                        @onclick="async() => await SetCallbackResult(true)">
                    Ok
                </button>

                @if (MessageBoxType == MessageBoxType.Confirm)
                {
                    <button type="button" class="btn btn-secondary"
                        @onclick="async () => await SetCallbackResult(false)">
                        Cancel
                    </button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private ElementReference _modalElement;
    private IJSObjectReference? _module;
    private IJSObjectReference? _modalInstance;

    private string Title { get; set; } = string.Empty;
    private string Text { get; set; } = string.Empty;
    private MessageBoxType MessageBoxType { get; set; } = MessageBoxType.Alert;
    private Func<bool, Task>? ReturnCallback { get; set; }

    protected override void OnInitialized()
    {
        MessageBoxService.MessageBoxShow += MessageBoxShow;
    }

    private void MessageBoxShow(object? sender, MessageBoxShowEventArgs e)
    {
        Title = e.Title;
        Text = e.Text;
        MessageBoxType = e.MessageBoxType;
        ReturnCallback = e.ReturnCallback;
        StateHasChanged();
        _module?.InvokeVoidAsync("show", _modalInstance);
    }

    private async ValueTask SetCallbackResult(bool result)
    {
        if (_module is not null)
            await _module.InvokeVoidAsync("hide", _modalInstance);
        // HACK: used to allow another modal to be opened immediately
        //
        await Task.Delay(500);
        ReturnCallback?.Invoke(result);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JS.ImportModuleAsync("./_content/Dottor.Blazor.UI/MessageBox.razor.js");
            _modalInstance = await _module.InvokeAsync<IJSObjectReference>("init", _modalElement);
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        MessageBoxService.MessageBoxShow -= MessageBoxShow;

        try
        {
            if (_modalInstance is not null)
                await _modalInstance.DisposeAsync();

            if (_module is not null)
                await _module.DisposeAsync();
        }
        catch (JSDisconnectedException)
        {
            // do nothing.
            // Can occour only in Blazor Server
        }
    }

}